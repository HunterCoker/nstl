#pragma once

#include "types"

namespace nstl {

template<class T>
class initializer_list
{
public:
    typedef const T* 	const_iterator;
private:
    const_iterator m_data;
    size_t m_size;

    // The compiler can call a private constructor.
    constexpr initializer_list(const_iterator data, size_t size)
            : m_data(data), m_size(size) {}

public:
    constexpr initializer_list() noexcept
            : m_data(nullptr), m_size(0) {}

    constexpr size_t size() const noexcept { return m_size; }
    constexpr const_iterator begin() const noexcept { return m_data; }
    constexpr const_iterator end() const noexcept { return begin() + size(); }
};

}  // nstl

